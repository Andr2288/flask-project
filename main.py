from flask import Flask, render_template, request, redirect, url_for, flash, session, jsonify
from flask_wtf.csrf import CSRFProtect
from flask_jwt_extended import JWTManager
from flask_migrate import Migrate
from config import Config
from models import db, User, Post, Comment
from forms import LoginForm, RegistrationForm, PostForm, CommentForm, UserForm
from api import init_api


def create_app():
    """–§–∞–±—Ä–∏–∫–∞ –¥–æ–¥–∞—Ç–∫—ñ–≤ Flask"""
    app = Flask(__name__)
    app.config.from_object(Config)

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è —Ä–æ–∑—à–∏—Ä–µ–Ω—å
    db.init_app(app)

    # –î–ª—è –Ω–∞–≤—á–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç—É –º–æ–∂–Ω–∞ –≤—ñ–¥–∫–ª—é—á–∏—Ç–∏ CSRF
    # csrf = CSRFProtect(app)

    jwt = JWTManager(app)
    migrate = Migrate(app, db)

    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è API
    api = init_api(app)

    return app, None, jwt, migrate, api


app, csrf, jwt, migrate, api = create_app()


# JWT –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–º–∏–ª–æ–∫
@jwt.expired_token_loader
def expired_token_callback(jwt_header, jwt_payload):
    return jsonify({'message': '–¢–æ–∫–µ–Ω –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π'}), 401


@jwt.invalid_token_loader
def invalid_token_callback(error):
    return jsonify({'message': '–ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–æ–∫–µ–Ω'}), 401


@jwt.unauthorized_loader
def missing_token_callback(error):
    return jsonify({'message': '–ü–æ—Ç—Ä—ñ–±–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è'}), 401


# –í–µ–±-–º–∞—Ä—à—Ä—É—Ç–∏ –∑ Flask-WTF
@app.route('/login', methods=['GET', 'POST'])
def login():
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è –∑ Flask-WTF"""
    form = LoginForm()

    if form.validate_on_submit():
        email = form.email.data
        password = form.password.data

        user = User.query.filter_by(email=email).first()

        if user and user.check_password(password):
            session['current_user'] = {
                'id': user.id,
                'username': user.username,
                'email': user.email,
                'is_admin': user.is_admin
            }
            flash(f'–õ–∞—Å–∫–∞–≤–æ –ø—Ä–æ—Å–∏–º–æ, {user.username}!', 'success')
            return redirect(url_for('index'))
        else:
            flash('–ù–µ–≤—ñ—Ä–Ω–∏–π email –∞–±–æ –ø–∞—Ä–æ–ª—å', 'error')

    return render_template('login_wtf.html', form=form)


@app.route('/register', methods=['GET', 'POST'])
def register():
    """–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è –∑ Flask-WTF"""
    form = RegistrationForm()

    if form.validate_on_submit():
        user = User(
            username=form.username.data,
            email=form.email.data
        )
        user.set_password(form.password.data)

        # –ü–µ—Ä—à–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —Å—Ç–∞—î –∞–¥–º—ñ–Ω–æ–º
        if User.query.count() == 0:
            user.is_admin = True

        db.session.add(user)
        db.session.commit()

        flash('–†–µ—î—Å—Ç—Ä–∞—Ü—ñ—è —É—Å–ø—ñ—à–Ω–∞!', 'success')
        return redirect(url_for('login'))

    return render_template('register_wtf.html', form=form)


@app.route('/')
def index():
    """–ì–æ–ª–æ–≤–Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫–∞"""
    if 'current_user' not in session:
        return redirect(url_for('login'))

    users = User.query.all()
    posts = Post.query.order_by(Post.created_at.desc()).limit(5).all()
    return render_template('index.html', users=users, posts=posts)


@app.route('/posts/create', methods=['GET', 'POST'])
def create_post():
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø–æ—Å—Ç–∞ –∑ Flask-WTF"""
    if 'current_user' not in session:
        return redirect(url_for('login'))

    form = PostForm()

    if form.validate_on_submit():
        post = Post(
            title=form.title.data,
            content=form.content.data,
            user_id=session['current_user']['id']
        )
        db.session.add(post)
        db.session.commit()

        flash('–ü–æ—Å—Ç —Å—Ç–≤–æ—Ä–µ–Ω–æ!', 'success')
        return redirect(url_for('posts'))

    return render_template('create_post_wtf.html', form=form)


@app.route('/posts')
def posts():
    """–°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—ñ–≤"""
    if 'current_user' not in session:
        return redirect(url_for('login'))

    posts = Post.query.order_by(Post.created_at.desc()).all()
    return render_template('posts.html', posts=posts)


@app.route('/posts/<int:id>')
def view_post(id):
    """–ü–µ—Ä–µ–≥–ª—è–¥ –ø–æ—Å—Ç–∞ –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏"""
    if 'current_user' not in session:
        return redirect(url_for('login'))

    post = Post.query.get_or_404(id)
    comments = Comment.query.filter_by(post_id=id).order_by(Comment.created_at.desc()).all()
    form = CommentForm()

    return render_template('view_post_wtf.html', post=post, comments=comments, form=form)


@app.route('/comments/create/<int:post_id>', methods=['POST'])
def create_comment(post_id):
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è –∑ Flask-WTF"""
    if 'current_user' not in session:
        return redirect(url_for('login'))

    form = CommentForm()

    if form.validate_on_submit():
        comment = Comment(
            content=form.content.data,
            post_id=post_id,
            user_id=session['current_user']['id']
        )
        db.session.add(comment)
        db.session.commit()
        flash('–ö–æ–º–µ–Ω—Ç–∞—Ä –¥–æ–¥–∞–Ω–æ!', 'success')

    return redirect(url_for('view_post', id=post_id))


@app.route('/logout')
def logout():
    """–í–∏—Ö—ñ–¥ –∑ —Å–∏—Å—Ç–µ–º–∏"""
    session.clear()
    flash('–î–æ –ø–æ–±–∞—á–µ–Ω–Ω—è!', 'success')
    return redirect(url_for('login'))


@app.route('/api-docs')
def api_docs():
    """–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è API"""
    return """
    <h1>API Documentation</h1>
    <h2>Endpoints:</h2>
    <ul>
        <li><strong>POST /api/auth/login</strong> - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—è</li>
        <li><strong>GET /api/users</strong> - –°–ø–∏—Å–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ (–∞–¥–º—ñ–Ω)</li>
        <li><strong>POST /api/users</strong> - –°—Ç–≤–æ—Ä–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–¥–º—ñ–Ω)</li>
        <li><strong>GET /api/users/{id}</strong> - –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</li>
        <li><strong>PUT /api/users/{id}</strong> - –û–Ω–æ–≤–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞</li>
        <li><strong>DELETE /api/users/{id}</strong> - –í–∏–¥–∞–ª–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ (–∞–¥–º—ñ–Ω)</li>
        <li><strong>GET /api/posts</strong> - –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç—ñ–≤</li>
        <li><strong>POST /api/posts</strong> - –°—Ç–≤–æ—Ä–∏—Ç–∏ –ø–æ—Å—Ç</li>
        <li><strong>GET /api/posts/{id}</strong> - –ü–æ—Å—Ç –∑ –∫–æ–º–µ–Ω—Ç–∞—Ä—è–º–∏</li>
        <li><strong>PUT /api/posts/{id}</strong> - –û–Ω–æ–≤–∏—Ç–∏ –ø–æ—Å—Ç</li>
        <li><strong>DELETE /api/posts/{id}</strong> - –í–∏–¥–∞–ª–∏—Ç–∏ –ø–æ—Å—Ç</li>
    </ul>

    <h2>Aiohttp Server:</h2>
    <p>–ó–∞–ø—É—Å—Ç—ñ—Ç—å –æ–∫—Ä–µ–º–æ: python aiohttp_server.py</p>
    <ul>
        <li><strong>GET localhost:8080/api/async/posts</strong> - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ –ø–æ—Å—Ç–∏</li>
        <li><strong>GET localhost:8080/api/async/users</strong> - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ</li>
        <li><strong>GET localhost:8080/api/async/external/news</strong> - –ó–æ–≤–Ω—ñ—à–Ω—ñ–π API</li>
    </ul>
    """


def start_aiohttp_server():
    """–ó–∞–ø—É—Å–∫ aiohttp —Å–µ—Ä–≤–µ—Ä–∞ –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ"""
    print("üí° –î–ª—è –∑–∞–ø—É—Å–∫—É aiohttp —Å–µ—Ä–≤–µ—Ä–∞ –≤–∏–∫–æ–Ω–∞–π—Ç–µ:")
    print("   python aiohttp_server.py")
    print("   –∞–±–æ")
    print("   python aiohttp_simple.py (–±–µ–∑ MySQL)")


if __name__ == '__main__':
    with app.app_context():
        db.create_all()

    print("=" * 50)
    print("üöÄ Flask –¥–æ–¥–∞—Ç–æ–∫ –∑ —É—Å—ñ–º–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥—ñ—è–º–∏ –∑–∞–ø—É—â–µ–Ω–æ!")
    print("=" * 50)
    print("‚úÖ –†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ:")
    print("  - Python")
    print("  - Flask")
    print("  - MySQL")
    print("  - Flask-SQLAlchemy")
    print("  - Flask-WTF")
    print("  - Flask-JWT-Extended")
    print("  - Flask-RESTful")
    print("  - Flask-Migrate")
    print("  - jinja2")
    print("  - aiohttp (–æ–∫—Ä–µ–º–∏–π —Å–µ—Ä–≤–µ—Ä)")
    print("  - asyncio")
    print("=" * 50)
    print("üìö –ö–æ—Ä–∏—Å–Ω—ñ –ø–æ—Å–∏–ª–∞–Ω–Ω—è:")
    print("  - –í–µ–±-—ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å: http://localhost:5000")
    print("  - API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—è: http://localhost:5000/api-docs")
    print("  - Aiohttp —Å–µ—Ä–≤–µ—Ä: python aiohttp_server.py (localhost:8080)")
    print("=" * 50)
    print("‚ö° –ú—ñ–≥—Ä–∞—Ü—ñ—ó:")
    print("  flask db init")
    print("  flask db migrate -m 'Initial migration'")
    print("  flask db upgrade")
    print("=" * 50)

    # –ú–æ–∂–Ω–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–∏ aiohttp –≤ –æ–∫—Ä–µ–º–æ–º—É –ø–æ—Ç–æ—Ü—ñ
    # threading.Thread(target=start_aiohttp_server, daemon=True).start()

    app.run(debug=True, host='0.0.0.0', port=5000)